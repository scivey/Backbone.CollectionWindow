// Generated by CoffeeScript 1.6.3
(function() {
  var Backbone, CollectionWindow, exports, flatsplat, isInList, reverse, _,
    __slice = [].slice;

  if (typeof window === "undefined") {
    _ = require("underscore");
    Backbone = require("backbone");
  } else {
    _ = window._;
    Backbone = window.Backbone;
  }

  flatsplat = function(list) {
    if (list.length === 1 && _.isArray(list[0])) {
      return list[0];
    } else {
      return list;
    }
  };

  isInList = function() {
    var el, list, _i, _len, _toMatch;
    list = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    list = flatsplat(list);
    _toMatch = {};
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      el = list[_i];
      _toMatch[el] = true;
    }
    return function(toTest) {
      if (_toMatch[toTest] != null) {
        return true;
      } else {
        return false;
      }
    };
  };

  reverse = function() {
    var it, list, _o;
    list = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    list = flatsplat(list);
    _o = [];
    it = list.length - 1;
    while (it > 0) {
      _o.push(list[it]);
      it--;
    }
    return _o;
  };

  CollectionWindow = Backbone.Collection.extend({
    constructor: function(parent, options) {
      var _eventPred;
      if (options != null) {
        options = _.clone(options);
      } else {
        options = {};
      }
      this._parent = parent;
      if (options.start == null) {
        options.start = 0;
      }
      if (options.size == null) {
        options.size = 1;
      }
      this._currentStartIndex = options.start;
      this._windowSize = options.size;
      this._parentLength = function() {
        return this._parent.length;
      };
      Backbone.Collection.prototype.constructor.apply(this, [options]);
      this.refreshWindow();
      _eventPred = isInList("add", "remove", "reset", "sort");
      return this.listenTo(parent, "all", function(evtName, params) {
        if (_eventPred(evtName)) {
          return this.refreshWindow();
        }
      });
    },
    refreshWindow: function() {
      var _mods, _range;
      _range = this._getRange();
      this._reset();
      _mods = this._parent.slice(_range[0], _range[1]);
      this.add(_mods);
      return this.trigger("window:changed");
    },
    _getRange: function() {
      var _end, _start;
      _start = this._currentStartIndex;
      _end = _start + this._windowSize;
      return [_start, _end];
    },
    _getLastPossibleRange: function() {
      var _len, _r, _start;
      _len = this._parentLength();
      _start = _len - this._windowSize;
      _r = [_start, _len];
      return _r;
    },
    _getFirstPossibleRange: function() {
      var _end, _len, _r, _size, _start;
      _len = this._parentLength();
      _size = this._windowSize;
      _start = 0;
      if (_len >= _size) {
        _end = _start + _size;
      } else {
        _end = _len;
      }
      return _r = [_start, _end];
    },
    goForward: function(n) {
      var _i, _lastRange, _newRange, _range;
      if (n == null) {
        n = 1;
      }
      _range = this._getRange();
      if ((_range[1] + n) > this._parentLength()) {
        _lastRange = this._getLastPossibleRange();
        if (_range[0] === _lastRange[0]) {
          if (_range[1] === _lastRange[1]) {
            return false;
          }
        }
        this._currentStartIndex = _lastRange[0];
      } else {
        this._currentStartIndex += n;
      }
      _newRange = this._getRange();
      if (_newRange[0] > _range[1]) {
        this._reset();
        this.add(this._parent.slice(_newRange[0], _newRange[1]));
      } else {
        _i = n;
        while (_i--) {
          this.shift();
        }
        this.add(this._parent.slice(_range[1], _newRange[1]));
      }
      this.trigger("window:changed");
      return true;
    },
    goBack: function(n) {
      var x, _firstRange, _i, _j, _len, _newRange, _range, _slice;
      if (n == null) {
        n = 1;
      }
      _range = this._getRange();
      if ((_range[0] - n) < 0) {
        _firstRange = this._getFirstPossibleRange();
        if (_range[0] === _firstRange[0]) {
          if (_range[1] === _firstRange[1]) {
            return false;
          }
        }
        this._currentStartIndex = _firstRange[0];
      } else {
        this._currentStartIndex -= n;
      }
      _newRange = this._getRange();
      if (_newRange[1] < _range[0]) {
        this._reset();
        this.add(this._parent.slice(_newRange[0], _newRange[1]));
      } else {
        _i = n;
        while (_i) {
          this.pop();
          _i--;
        }
        _slice = this._parent.slice(_newRange[0] - 1, _range[0] + 1);
        _slice = reverse(_slice);
        for (_j = 0, _len = _slice.length; _j < _len; _j++) {
          x = _slice[_j];
          this.unshift(x);
        }
      }
      this.trigger("window:changed");
      return true;
    }
  });

  Backbone.CollectionWindow = CollectionWindow;

  if ((typeof module !== "undefined" && module !== null) && (module.exports != null)) {
    module.exports.CollectionWindow = CollectionWindow;
  }

  if (typeof exports !== "undefined" && exports !== null) {
    exports = module.exports;
  }

}).call(this);
